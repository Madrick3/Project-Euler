/*
Welcome to Patrick Flaherty's Euler2 program
March 3, 2018
Euler2:

Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.


So we are attempting to determine the sum of all even fibb numbers up to 4,000,000
*/

import java.*;
import java.util.*;

public class Euler2{
	double sTime;
	double eTime;
	double time1;
	double time2;
	double time3;
	long sum;
	int first;
	int second;
	int third;
	//Euler2 E = new Euler2();
	
	//This is a "one line main" (well actually 2 lines but olm sounds cooler)- We use this to make a new Euler object so that we can access nonstatic methods.
	public static void main(String [] args)
	{
		Euler2 E = new Euler2();
		E.run();
	}

	//This is the first method that the Euler object will run (hence the name). 
	public void run()
	{
		this.reset();
		this.method1();
	}
	
	//This method will 
	public void reset()
	{
		sum = 2;
		first = 1;
		second = 2;
		third = 3;
	}
	
	//This is the first method that came to my head, like in E1, I will be comparing different methods using nanotime.
	//We will go one by one, through the fibb sequence, then check if they are even, and add them to the sum
	public void method1()
	{
		sTime = System.nanoTime();
		while(third <= 4000000)
		{
			if(third%2 == 0)
				sum = sum + third;
			first = second;
			second = third;
			third = first+second;
		}
		eTime = System.nanoTime();
		time1 = (eTime-sTime) * 0.000001; //this gives us the difference in ms
		System.out.println("The determined sum is: " + sum);
		if(sum<=0)
			System.out.println("We have detected overflow in the system");
		System.out.println("This took " + time1 + " ms");
	}
	
	//I did not do this any other ways, I am pretty sure this is the fastest way I can think of. Counting each third number in the order would 
}